[user]
  name = Yui Sakamoto
	email = yuitang.dev@gmail.com
[color]
  # colorの設定(以下のコマンドは自動で色つける)
  status = auto
  diff = auto
  branch = auto
  interactive = auto
  grep = auto
  ui = auto
[push]
  default = tracking       # defaultのpush先はtrackingしているリポジトリ
[core]
  excludesfile = ~/.gitignore  # globalな.gitignoreの指定
  editor = nvim
  quotepath = false
[merge]
  tool = vimdiff
  ff = true
[branch]
  autosetuprebase = always
[pull]
  rebase = true
[ghq]
	root = ~/src
[alias]
  s   = status
  st  = status
  ss  = status -s
  sh  = show
  so  = remote show origin
  # pull/push/fetch
  ft  = fetch
  ftp = fetch --prune
  up  = pull --rebase       # pull rebase
  po  = push origin         # push origin
  pof = push -f origin      # force
  pu  = push -u origin      # push origin and set upstream
  please = push --force-with-lease --force-if-includes # push force with lease if includes
  # rebase
  rbm = rebase --merge master       # masterへのrebaseはよく使うのでalias
  rbd = rebase --merge develop
  rbc = rebase --continue
  rba = rebase --abort
  rbi = rebase -i
  rbi1 = rebase -i HEAD^
  rbi2 = rebase -i HEAD^^
  rbi3 = rebase -i HEAD^^^
  rbi4 = rebase -i HEAD^^^^
  rbi5 = rebase -i HEAD^^^^^
  # merge
  mn  = merge --no-ff
  # comit
  ad  = add
  c   = commit
  ci  = commit -a           # modifiedなファイルを全てstageへ
  cam = commit -a --amend   # 直前のcommitを修正
  co  = checkout
  cb  = checkout -b         # branch切ってcheckoutする
  ct  = checkout --track    # remoteのbranchを追跡
  cm  = checkout master
  cd  = checkout develop
  # branch関連
  br  = branch
  ba  = branch -a           # originも含めた全てのbranchを表示
  bm  = branch --merged     # merge済みのbranchを表示
  bn  = branch --no-merged  # mergeしてないbranchを表示
  bo  = branch -r           # remote branchを表示
  # log関連
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  wc  = whatchanged         # logに変更されたファイルも一緒に出す
  ls  = log --stat          # logに変更されたファイルも一緒に出す
  lp  = log -p              # diffも一緒に出す
  la  = log --pretty=\"format:%ad %h (%an): %s\" --date=short  # ざっくりログ出す
  lr  = log origin          # originのlog
  ll = log --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn%x09%Creset%s' # onelineでlogを出す
  lg = log --graph --decorate --oneline #グラフ表示
  oneline = log --pretty=oneline
  ranking = shortlog -s -n --no-merges
  # logをtree表示
  log-graph = log --graph --date=short --pretty=format:'%Cgreen%h %cd %Cblue%cn %Creset%s'
  log-all = log --graph --all --color --pretty='%x09%h %cn%x09%s %Cred%d%Creset'
  # reset
  r    = reset HEAD
  r1   = reset HEAD~
  r2   = reset HEAD~~
  r3   = reset HEAD~~~
  r4   = reset HEAD~~~~
  r5   = reset HEAD~~~~~
  rsh  = reset --soft HEAD
  rsh1 = reset --soft HEAD~
  rsh2 = reset --soft HEAD~~
  rsh3 = reset --soft HEAD~~~
  rsh4 = reset --soft HEAD~~~~
  rsh5 = reset --soft HEAD~~~~~
  rhh  = reset --hard HEAD       # 取り返しのつかないことをしてしまった……!
  rhh1 = reset --hard HEAD~
  rhh2 = reset --hard HEAD~~
  rhh3 = reset --hard HEAD~~~
  rhh4 = reset --hard HEAD~~~~
  rhh5 = reset --hard HEAD~~~~~
  # diff関連
  di = diff
  dm = diff master           # masterとのdiff
  dw = diff --color-words    # 単語単位でいろつけてdiff
  dc = diff --cached         # addされているものとのdiff
  ds = diff --staged         # 同上(1.6.1移行)
  d1 = diff HEAD~            # HEADから1つ前とdiff
  d2 = diff HEAD~~           # HEADから2つ前とdiff
  d3 = diff HEAD~~~          # HEADから3つ前とdiff
  d4 = diff HEAD~~~~         # HEADから4つ前とdiff
  d5 = diff HEAD~~~~~        # HEADから5つ前とdiff
  d10 = diff HEAD~~~~~~~~~~  # HEADから10前とdiff
  # edit関連
  # modified or untrackedなファイルを編集する
  edit = "!f() { git status -s | cut -b 4- | grep -v '\\/$' | uniq ; }; vim `f`"
  # mergeの際にconflictが起きたファイルを編集
  edit-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; vim `f`"
  # mergeの際にconflictが起きたファイルをadd
  add-unmerged = "!f() { git ls-files --unmerged | cut -f2 | sort -u ; }; git add `f`"
  delete-unmerged =  "!f() { git ls-files --deleted | cut -f2 | sort -u ; }; git rm `f`"
  # 指定したコミットで変更されたファイルを編集する
  modified = "!f() { git diff $1..$1\\^ --name-only | xargs sh -c 'vim "$@" < /dev/tty' - ;}; f"
  # cherr -vで出てくる;commitから#1234なチケット番号を切り出す
  cherry-ticket-numbers = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART, RLENGTH)}' | sort -u ;}; f"
  # cherr -vに含まれるチケットを列挙する
  cherry-tickets = "!f() { git cherry -v "$@" | cut -b 44- | awk 'match($0, /#[0-9]+/) {print substr($0, RSTART+1, RLENGTH-1)}' | sort -u | xargs git issue --oneline  ;}; f"
  # colorized cheery -v
  cch= "!f() { git cherry -v "$@" | awk '{ if($1 == \"+\"){ color = \"green\" } if($1 == \"-\"){ color = \"red\" } cmd = \"git show --date=short --no-notes --pretty=format:\\047%C\" color $1 \" %h %Cgreen%cd %Cblue%cn%x09%Creset%s\\047 --summary \" $2; cmd | getline t; close(cmd); print t }' ;}; f"
  # Delete merged branch
  delete-merged = !"git branch --merged | grep -v '*' | xargs -I % git branch -d %"
  dmb = delete-merged

  # WorkTree
  # worktree作成（新規ブランチ）
  wta = "!f() { git worktree add .git/worktrees/$1 -b $1; }; f"
  # worktree作成（既存ブランチ）
  # worktree一覧
  wtl = worktree list
  # worktree削除
  wtr = "!f() { git worktree remove .git/worktrees/$1; }; f"
  # 基本のエイリアス表示
  a = !git config --get-regexp alias | sed 's/alias\\.//' | sort

  # 詳細表示（エイリアス名と内容を整形）
  aa = !git config --get-regexp alias | sed -E 's/alias\\.([^ ]+) (.+)/\\1\\t=> \\2/' | sort | column -t -s $'\\t'

  # グループ化して表示（プレフィックスでグループ化）
  aaa = "!f() { \
      echo '\\033[1;36m📚 Git Aliases\\033[0m'; \
      echo ''; \
      git config --get-regexp alias | \
      sed -E 's/alias\\.([^ ]+) (.+)/\\1|\\2/' | \
      sort | \
      awk -F'|' '{ \
          prefix = substr($1, 1, index($1 \"-\", \"-\") - 1); \
          if (prefix != lastPrefix && index($1, \"-\") > 0) { \
              print \"\\n\\033[1;33m[\" toupper(prefix) \"]\\033[0m\"; \
              lastPrefix = prefix; \
          } \
          printf \"  \\033[32m%-20s\\033[0m %s\\n\", $1, $2; \
      }'; \
  }; f"
[http]
  sslVerify = false
[credential]
	helper = cache --timeout=3600
[filter "lfs"]
	process = git-lfs filter-process
	required = true
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
[init]
	defaultBranch = main
[safe]
	directory = /go/src/github.com/newmohq/newmo-app
